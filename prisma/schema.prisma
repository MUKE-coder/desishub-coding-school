// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
model Waitlist {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  firstName    String
  lastName     String
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
}
model Bootcamp {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  firstName    String
  lastName     String
  phone     String
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
}
model Booking {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  firstName    String
  lastName     String?
  phone     String?
  planTye   String?
  regNo     String
  planPrice Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Puser {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  email       String    @unique
  fullName    String?
  suggestedProjects SuggestedProject[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model SuggestedProject {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  design   String?
  description String?
  techStack   String?
  votes       Int       @default(0)
  puserId      String @db.ObjectId
  puser        Puser      @relation(fields: [puserId], references: [id])
  status      Boolean   @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
// Define the Course model
model Course {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title               String
  slug               String @unique
  description         String?
  courseImage         String?
  nowPrice            Float?
  soonPrice           Float?
  laterPrice          Float?
  isPublished         Boolean @default(true)
  enrolledStudentCount Int?
  courseOverview      String[]
  keywords          String[]
  courseIntroLink     String?
  whatYouWillLearn    String[]
  courseFor           String[]
  prerequisites       String[]
  whatWillYouBuild    String[]
  attachment          String?
  isPaid              Boolean @default(true)
  sections            Section[] // One-to-many relation with Section
  attachments            Attachment[] // One-to-many relation with Attatchment
  faqs                FAQ[]     // One-to-many relation with FAQ
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Define the Section model
model Section {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  course      Course   @relation(fields: [courseId], references: [id]) // Many-to-one relation with Course
  courseId    String   @db.ObjectId
  lessons     Lesson[] // One-to-many relation with Lesson
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Define the Lesson model
model Lesson {
 id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title    String
  isVideo  Boolean
  videoUrl String?
  fileUrl  String?
  isPublic Boolean
  section  Section @relation(fields: [sectionId], references: [id]) // Many-to-one relation with Section
  sectionId String  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Define the FAQ model
model FAQ {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  question String
  answer   String
  course   Course  @relation(fields: [courseId], references: [id]) // Many-to-one relation with Course
  courseId String  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Attachment {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title String
  url   String
  course   Course  @relation(fields: [courseId], references: [id]) // Many-to-one relation with Course
  courseId String  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
